name: Build Telegram X Multi-ABI

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  APP_ID: ${{ secrets.APP_ID }}
  APP_HASH: ${{ secrets.APP_HASH }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        abi: [armeabi-v7a, arm64-v8a, x86_64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Generate local.properties with Telegram credentials
        run: |
          echo "sdk.dir=$ANDROID_HOME" > local.properties
          echo "ndk.dir=$ANDROID_NDK_HOME" >> local.properties
          echo "telegram.api_id=${APP_ID}" >> local.properties
          echo "telegram.api_hash=${APP_HASH}" >> local.properties
          cat local.properties
        env:
          APP_ID: ${{ secrets.APP_ID }}
          APP_HASH: ${{ secrets.APP_HASH }}

      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build pkg-config gperf wget unzip perl zlib1g-dev libssl-dev

      - name: Clean old TDLib folder
        run: rm -rf tdlib

      - name: Clone TDLib
        run: git clone --depth=1 https://github.com/tdlib/td.git tdlib

      - name: Download & build OpenSSL for Android (${{ matrix.abi }})
        run: |
          mkdir -p tdlib/source/openssl
          cd tdlib/source/openssl
          wget https://www.openssl.org/source/openssl-1.1.1u.tar.gz
          tar xvf openssl-1.1.1u.tar.gz
          cd openssl-1.1.1u
          export ANDROID_NDK=$ANDROID_NDK_HOME
          export PATH=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
          if [ "${{ matrix.abi }}" = "armeabi-v7a" ]; then
            ./Configure android-arm -D__ANDROID_API__=24 no-shared no-unit-test
          elif [ "${{ matrix.abi }}" = "arm64-v8a" ]; then
            ./Configure android-arm64 -D__ANDROID_API__=24 no-shared no-unit-test
          elif [ "${{ matrix.abi }}" = "x86_64" ]; then
            ./Configure android-x86_64 -D__ANDROID_API__=24 no-shared no-unit-test
          fi
          make -j$(nproc)
          cd ../../..

      - name: Build TDLib for Android (${{ matrix.abi }})
        run: |
          cd tdlib
          mkdir -p build && cd build
          cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK/build/cmake/android.toolchain.cmake \
                -DANDROID_ABI=${{ matrix.abi }} \
                -DANDROID_PLATFORM=android-24 \
                -DCMAKE_BUILD_TYPE=Release \
                -DOPENSSL_ROOT_DIR=$GITHUB_WORKSPACE/tdlib/source/openssl/openssl-1.1.1u \
                -DCMAKE_INSTALL_PREFIX:PATH=../install ..
          cmake --build . --target install -j$(nproc)
          cd ../..
          mkdir -p app/tdlib/source
          cp -r tdlib/install/include app/tdlib/source/
          cp -r tdlib/install/lib app/tdlib/source/

      - name: Build release APK(s) (${{ matrix.abi }})
        run: ./gradlew assembleRelease --no-daemon

      - name: Upload APK artifacts (${{ matrix.abi }})
        uses: actions/upload-artifact@v4
        with:
          name: telegram-x-apks-${{ matrix.abi }}
          path: '**/build/outputs/apk/**/*.apk'
          compression-level: 6
          overwrite: true
